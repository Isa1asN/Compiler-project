# Generated from C_Grammar.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
from typing import TextIO



def serializedATN():
    return [
        4,0,44,319,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,
        1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,
        1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,
        1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,
        1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,
        1,35,1,36,1,36,1,37,1,37,1,38,1,38,5,38,227,8,38,10,38,12,38,230,
        9,38,1,38,1,38,1,39,1,39,1,39,3,39,237,8,39,1,39,1,39,1,40,4,40,
        242,8,40,11,40,12,40,243,1,41,4,41,247,8,41,11,41,12,41,248,1,41,
        1,41,4,41,253,8,41,11,41,12,41,254,3,41,257,8,41,1,42,3,42,260,8,
        42,1,43,1,43,1,44,1,44,3,44,266,8,44,1,44,1,44,1,44,5,44,271,8,44,
        10,44,12,44,274,9,44,1,45,1,45,1,45,5,45,279,8,45,10,45,12,45,282,
        9,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,290,8,46,10,46,12,46,293,
        9,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,303,8,47,10,47,
        12,47,306,9,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,3,228,291,304,0,49,1,0,3,0,5,0,7,0,9,0,11,1,13,2,15,3,
        17,4,19,5,21,6,23,7,25,8,27,9,29,10,31,11,33,12,35,13,37,14,39,15,
        41,16,43,17,45,18,47,19,49,20,51,21,53,22,55,23,57,24,59,25,61,26,
        63,27,65,28,67,29,69,30,71,31,73,32,75,33,77,34,79,35,81,36,83,37,
        85,38,87,39,89,40,91,41,93,42,95,43,97,44,1,0,2,2,0,65,90,97,122,
        9,0,33,33,35,38,40,43,45,45,47,47,60,60,62,64,92,92,94,94,328,0,
        11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,
        21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,
        31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
        41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,
        51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
        61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,
        71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,
        81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,
        91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,1,99,1,0,0,0,3,
        101,1,0,0,0,5,103,1,0,0,0,7,105,1,0,0,0,9,107,1,0,0,0,11,109,1,0,
        0,0,13,115,1,0,0,0,15,119,1,0,0,0,17,124,1,0,0,0,19,143,1,0,0,0,
        21,148,1,0,0,0,23,154,1,0,0,0,25,158,1,0,0,0,27,161,1,0,0,0,29,166,
        1,0,0,0,31,173,1,0,0,0,33,176,1,0,0,0,35,179,1,0,0,0,37,181,1,0,
        0,0,39,183,1,0,0,0,41,186,1,0,0,0,43,189,1,0,0,0,45,191,1,0,0,0,
        47,193,1,0,0,0,49,195,1,0,0,0,51,197,1,0,0,0,53,199,1,0,0,0,55,201,
        1,0,0,0,57,203,1,0,0,0,59,205,1,0,0,0,61,207,1,0,0,0,63,209,1,0,
        0,0,65,211,1,0,0,0,67,213,1,0,0,0,69,216,1,0,0,0,71,218,1,0,0,0,
        73,220,1,0,0,0,75,222,1,0,0,0,77,224,1,0,0,0,79,233,1,0,0,0,81,241,
        1,0,0,0,83,246,1,0,0,0,85,259,1,0,0,0,87,261,1,0,0,0,89,265,1,0,
        0,0,91,280,1,0,0,0,93,285,1,0,0,0,95,298,1,0,0,0,97,312,1,0,0,0,
        99,100,2,48,57,0,100,2,1,0,0,0,101,102,5,95,0,0,102,4,1,0,0,0,103,
        104,5,32,0,0,104,6,1,0,0,0,105,106,5,9,0,0,106,8,1,0,0,0,107,108,
        5,10,0,0,108,10,1,0,0,0,109,110,5,102,0,0,110,111,5,108,0,0,111,
        112,5,111,0,0,112,113,5,97,0,0,113,114,5,116,0,0,114,12,1,0,0,0,
        115,116,5,105,0,0,116,117,5,110,0,0,117,118,5,116,0,0,118,14,1,0,
        0,0,119,120,5,99,0,0,120,121,5,104,0,0,121,122,5,97,0,0,122,123,
        5,114,0,0,123,16,1,0,0,0,124,125,5,35,0,0,125,126,5,105,0,0,126,
        127,5,110,0,0,127,128,5,99,0,0,128,129,5,108,0,0,129,130,5,117,0,
        0,130,131,5,100,0,0,131,132,5,101,0,0,132,133,5,32,0,0,133,134,5,
        60,0,0,134,135,5,115,0,0,135,136,5,116,0,0,136,137,5,100,0,0,137,
        138,5,105,0,0,138,139,5,111,0,0,139,140,5,46,0,0,140,141,5,104,0,
        0,141,142,5,62,0,0,142,18,1,0,0,0,143,144,5,118,0,0,144,145,5,111,
        0,0,145,146,5,105,0,0,146,147,5,100,0,0,147,20,1,0,0,0,148,149,5,
        119,0,0,149,150,5,104,0,0,150,151,5,105,0,0,151,152,5,108,0,0,152,
        153,5,101,0,0,153,22,1,0,0,0,154,155,5,102,0,0,155,156,5,111,0,0,
        156,157,5,114,0,0,157,24,1,0,0,0,158,159,5,105,0,0,159,160,5,102,
        0,0,160,26,1,0,0,0,161,162,5,101,0,0,162,163,5,108,0,0,163,164,5,
        115,0,0,164,165,5,101,0,0,165,28,1,0,0,0,166,167,5,114,0,0,167,168,
        5,101,0,0,168,169,5,116,0,0,169,170,5,117,0,0,170,171,5,114,0,0,
        171,172,5,110,0,0,172,30,1,0,0,0,173,174,5,61,0,0,174,175,5,61,0,
        0,175,32,1,0,0,0,176,177,5,33,0,0,177,178,5,61,0,0,178,34,1,0,0,
        0,179,180,5,62,0,0,180,36,1,0,0,0,181,182,5,60,0,0,182,38,1,0,0,
        0,183,184,5,62,0,0,184,185,5,61,0,0,185,40,1,0,0,0,186,187,5,60,
        0,0,187,188,5,61,0,0,188,42,1,0,0,0,189,190,5,43,0,0,190,44,1,0,
        0,0,191,192,5,45,0,0,192,46,1,0,0,0,193,194,5,42,0,0,194,48,1,0,
        0,0,195,196,5,47,0,0,196,50,1,0,0,0,197,198,5,61,0,0,198,52,1,0,
        0,0,199,200,5,40,0,0,200,54,1,0,0,0,201,202,5,41,0,0,202,56,1,0,
        0,0,203,204,5,91,0,0,204,58,1,0,0,0,205,206,5,93,0,0,206,60,1,0,
        0,0,207,208,5,123,0,0,208,62,1,0,0,0,209,210,5,125,0,0,210,64,1,
        0,0,0,211,212,5,59,0,0,212,66,1,0,0,0,213,214,5,45,0,0,214,215,5,
        62,0,0,215,68,1,0,0,0,216,217,5,39,0,0,217,70,1,0,0,0,218,219,5,
        34,0,0,219,72,1,0,0,0,220,221,5,44,0,0,221,74,1,0,0,0,222,223,5,
        38,0,0,223,76,1,0,0,0,224,228,3,71,35,0,225,227,9,0,0,0,226,225,
        1,0,0,0,227,230,1,0,0,0,228,229,1,0,0,0,228,226,1,0,0,0,229,231,
        1,0,0,0,230,228,1,0,0,0,231,232,3,71,35,0,232,78,1,0,0,0,233,236,
        3,69,34,0,234,237,3,85,42,0,235,237,3,87,43,0,236,234,1,0,0,0,236,
        235,1,0,0,0,237,238,1,0,0,0,238,239,3,69,34,0,239,80,1,0,0,0,240,
        242,3,1,0,0,241,240,1,0,0,0,242,243,1,0,0,0,243,241,1,0,0,0,243,
        244,1,0,0,0,244,82,1,0,0,0,245,247,3,1,0,0,246,245,1,0,0,0,247,248,
        1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,256,1,0,0,0,250,252,
        9,0,0,0,251,253,3,1,0,0,252,251,1,0,0,0,253,254,1,0,0,0,254,252,
        1,0,0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,250,1,0,0,0,256,257,
        1,0,0,0,257,84,1,0,0,0,258,260,7,0,0,0,259,258,1,0,0,0,260,86,1,
        0,0,0,261,262,7,1,0,0,262,88,1,0,0,0,263,266,7,0,0,0,264,266,3,3,
        1,0,265,263,1,0,0,0,265,264,1,0,0,0,266,272,1,0,0,0,267,271,7,0,
        0,0,268,271,3,3,1,0,269,271,3,1,0,0,270,267,1,0,0,0,270,268,1,0,
        0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,
        0,0,273,90,1,0,0,0,274,272,1,0,0,0,275,279,3,5,2,0,276,279,3,7,3,
        0,277,279,3,9,4,0,278,275,1,0,0,0,278,276,1,0,0,0,278,277,1,0,0,
        0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,
        0,282,280,1,0,0,0,283,284,6,45,0,0,284,92,1,0,0,0,285,286,5,47,0,
        0,286,287,5,47,0,0,287,291,1,0,0,0,288,290,9,0,0,0,289,288,1,0,0,
        0,290,293,1,0,0,0,291,292,1,0,0,0,291,289,1,0,0,0,292,294,1,0,0,
        0,293,291,1,0,0,0,294,295,5,10,0,0,295,296,1,0,0,0,296,297,6,46,
        0,0,297,94,1,0,0,0,298,299,5,47,0,0,299,300,5,42,0,0,300,304,1,0,
        0,0,301,303,9,0,0,0,302,301,1,0,0,0,303,306,1,0,0,0,304,305,1,0,
        0,0,304,302,1,0,0,0,305,307,1,0,0,0,306,304,1,0,0,0,307,308,5,42,
        0,0,308,309,5,47,0,0,309,310,1,0,0,0,310,311,6,47,0,0,311,96,1,0,
        0,0,312,313,5,112,0,0,313,314,5,114,0,0,314,315,5,105,0,0,315,316,
        5,110,0,0,316,317,5,116,0,0,317,318,5,102,0,0,318,98,1,0,0,0,15,
        0,228,236,243,248,254,256,259,265,270,272,278,280,291,304,1,6,0,
        0
    ]

class C_GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    K_FLOAT = 1
    K_INT = 2
    K_CHAR = 3
    INCLUDE = 4
    VOID = 5
    WHILE = 6
    FOR = 7
    IF = 8
    ELSE = 9
    RETURN = 10
    EQ = 11
    NEQ = 12
    GT = 13
    LT = 14
    GE = 15
    LE = 16
    PLUS = 17
    MIN = 18
    MULT = 19
    DIV = 20
    ASS = 21
    LPAREN = 22
    RPAREN = 23
    LBRACK = 24
    RBRACK = 25
    LCURL = 26
    RCURL = 27
    EOS = 28
    ARROW = 29
    S_QUOTE = 30
    D_QUOTE = 31
    COMMA = 32
    AMP = 33
    STRING = 34
    CHAR_T = 35
    INT = 36
    FLOAT = 37
    CHAR = 38
    SP_CHAR = 39
    WORD = 40
    WS = 41
    S_L_COMMENT = 42
    M_L_COMMENT = 43
    PRINTF = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'float'", "'int'", "'char'", "'#include <stdio.h>'", "'void'", 
            "'while'", "'for'", "'if'", "'else'", "'return'", "'=='", "'!='", 
            "'>'", "'<'", "'>='", "'<='", "'+'", "'-'", "'*'", "'/'", "'='", 
            "'('", "')'", "'['", "']'", "'{'", "'}'", "';'", "'->'", "'''", 
            "'\"'", "','", "'&'", "'printf'" ]

    symbolicNames = [ "<INVALID>",
            "K_FLOAT", "K_INT", "K_CHAR", "INCLUDE", "VOID", "WHILE", "FOR", 
            "IF", "ELSE", "RETURN", "EQ", "NEQ", "GT", "LT", "GE", "LE", 
            "PLUS", "MIN", "MULT", "DIV", "ASS", "LPAREN", "RPAREN", "LBRACK", 
            "RBRACK", "LCURL", "RCURL", "EOS", "ARROW", "S_QUOTE", "D_QUOTE", 
            "COMMA", "AMP", "STRING", "CHAR_T", "INT", "FLOAT", "CHAR", 
            "SP_CHAR", "WORD", "WS", "S_L_COMMENT", "M_L_COMMENT", "PRINTF" ]

    ruleNames = [ "DIGIT", "UNDRSCR", "SPACE", "TAB", "NEWL", "K_FLOAT", 
                  "K_INT", "K_CHAR", "INCLUDE", "VOID", "WHILE", "FOR", 
                  "IF", "ELSE", "RETURN", "EQ", "NEQ", "GT", "LT", "GE", 
                  "LE", "PLUS", "MIN", "MULT", "DIV", "ASS", "LPAREN", "RPAREN", 
                  "LBRACK", "RBRACK", "LCURL", "RCURL", "EOS", "ARROW", 
                  "S_QUOTE", "D_QUOTE", "COMMA", "AMP", "STRING", "CHAR_T", 
                  "INT", "FLOAT", "CHAR", "SP_CHAR", "WORD", "WS", "S_L_COMMENT", 
                  "M_L_COMMENT", "PRINTF" ]

    grammarFileName = "C_Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


